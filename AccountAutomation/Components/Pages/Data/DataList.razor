@page "/data"
@using Microsoft.AspNetCore.Authorization
@using WebUI.Components.Components
@using WebUI.Components.Pages.Data.Components

@inject IDataService dataService
@inject IDialogService dialogService
@inject MessageboxHelper messageboxHelper


@attribute [Authorize(Roles = "COMPANY,ADMIN")]


<PageTitle>Data Listesi</PageTitle>
<MudOverlay Visible="@isBusy" DarkBackground="true">
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>

<MudStack Class="mb-2 pa-3" Row=true Justify="Justify.SpaceBetween">
    <MudText Align="Align.Start" Typo="Typo.h5" Color="Color.Primary">Data Listesi</MudText>
    <MudItem>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ExportToExtract">Ekstre Oluştur</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => EditData(new DataModel()))">Veri Ekle</MudButton>
    </MudItem>
</MudStack>


<MudSimpleTable Dense=true Bordered=true FixedHeader=true Hover=true Striped=true>
    <thead>
        <tr>
            <th>İşlem Tipi</th>
            <th>Tarih</th>
            <th>Vade Tarihi</th>
            <th>Fatura No</th>
            <th>Açıklama</th>
            <th>Sipariş No</th>
            <th>Stok/Masraf Adı</th>
            <th>Stok Adet</th>
            <th>Birim Adı</th>
            <th>Kdv Tutar</th>
            <th>Döviz Birim</th>
            @if (datas.Count(s => s.Currency != CurrencyEnum.TL.ToString()) > 0)
            {
                <th>Döviz İşlem Toplamı</th>
            }
            <th>TL İşlem Toplamı</th>
            <th>TL Borç</th>
            <th>TL Alacak</th>
            <th>Alış KDV</th>
            <th>Satış KDV</th>
            @if (datas.Count(s => s.Currency != CurrencyEnum.TL.ToString()) > 0)
            {
                <th>Döviz Borç</th>
                <th>Döviz Alacak</th>
            }
            <th>TL Hareketler</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (datas.Count > 0)
        {
            TLMovement = 0;
            @for (int i = 0; i < datas.Count; i++)
            {
                int index = i;

                <tr>
                    <td>
                        @(EnumHelper<ProcessTypeEnum>.GetDisplayValue(datas[index].ProcessType))
                    </td>
                    <td>@datas[index].ProcessDate?.ToShortDateString()</td>
                    <td>
                        @datas[index].MaturityDate?.ToShortDateString()
                    </td>
                    <td>@datas[index].InvoiceNumber</td>
                    <td>@datas[index].Description</td>
                    <td>@datas[index].OrderNumber</td>
                    <td>@datas[index].ExpenseType</td>
                    <td>@datas[index].Stock</td>
                    <td>
                        @(EnumHelper<UnitEnum>.GetDisplayValue(datas[index].Unit))
                    </td>
                    <td>@datas[index].TaxAmount</td>
                    <td>@datas[index].Currency</td>
                    @if (datas.Count(s => s.Currency != CurrencyEnum.TL.ToString()) > 0)
                    {
                        <td>@datas[index].CurrencyTotalAmount</td>
                    }
                    <td>@datas[index].TLTotalAmount</td>
                    <td>
                        @if (datas[index].ProcessType.Contains(ProcessTypeEnum.BUY.ToString()) || datas[index].ProcessType.Contains(ProcessTypeEnum.COLLECT.ToString()) || datas[index].ProcessType.Contains(ProcessTypeEnum.SALE_REFUND.ToString()))
                        {
                            if (datas[index].CurrencyTotalAmount > 0)
                            {
                                @(datas[index].Currency == CurrencyEnum.USD.ToString() ? datas[index].CurrencyTotalAmount * datas[index].USDExchange : datas[index].CurrencyTotalAmount * datas[index].EURExchange)
                                ;
                            }
                            else
                            {
                                @datas[index].TLTotalAmount
                            }
                        }   
                    </td>
                    <td>
                        @if (datas[index].ProcessType.Contains(ProcessTypeEnum.SELL.ToString()) || datas[index].ProcessType.Contains(ProcessTypeEnum.PAY.ToString()) || datas[index].ProcessType.Contains(ProcessTypeEnum.PURCHASE_REFUND.ToString()))
                        {
                            if (datas[index].CurrencyTotalAmount > 0)
                            {
                                @(datas[index].Currency == CurrencyEnum.USD.ToString() ? datas[index].CurrencyTotalAmount * datas[index].USDExchange : datas[index].CurrencyTotalAmount * datas[index].EURExchange)
                                ;
                            }
                            else
                            {
                                @datas[index].TLTotalAmount
                            }
                        }
                    </td>
                    <td>
                        @if (datas[index].ProcessType.Contains(ProcessTypeEnum.BUY.ToString()) || datas[index].ProcessType.Contains(ProcessTypeEnum.COLLECT.ToString()) || datas[index].ProcessType.Contains(ProcessTypeEnum.SALE_REFUND.ToString()))
                        {
                            @datas[index].TaxAmount
                        }
                    </td>
                    <td>
                        @if (datas[index].ProcessType.Contains(ProcessTypeEnum.SELL.ToString()) || datas[index].ProcessType.Contains(ProcessTypeEnum.PAY.ToString()) || datas[index].ProcessType.Contains(ProcessTypeEnum.PURCHASE_REFUND.ToString()))
                        {
                            @datas[index].TaxAmount
                        }
                    </td>

                    @if (datas.Count(s => s.Currency != CurrencyEnum.TL.ToString()) > 0)
                    {
                        <td>
                            @if (datas[index].ProcessType.Contains(ProcessTypeEnum.BUY.ToString()) || datas[index].ProcessType.Contains(ProcessTypeEnum.COLLECT.ToString()) || datas[index].ProcessType.Contains(ProcessTypeEnum.SALE_REFUND.ToString()) && datas[index].CurrencyTotalAmount > 0)
                            {
                                @datas[index].CurrencyTotalAmount
                            }
                        </td>
                        <td>
                            @if (datas[index].ProcessType.Contains(ProcessTypeEnum.SELL.ToString()) || datas[index].ProcessType.Contains(ProcessTypeEnum.PAY.ToString()) || datas[index].ProcessType.Contains(ProcessTypeEnum.PURCHASE_REFUND.ToString()) && datas[index].CurrencyTotalAmount > 0)
                            {
                                @datas[index].CurrencyTotalAmount
                            }
                        </td>
                    }
                    <td>
                        @if (datas[index].ProcessType.Contains(ProcessTypeEnum.BUY.ToString()) || datas[index].ProcessType.Contains(ProcessTypeEnum.COLLECT.ToString()) || datas[index].ProcessType.Contains(ProcessTypeEnum.SALE_REFUND.ToString()))
                        {
                            TLMovement = TLMovement - datas[index].TLTotalAmount;
                            var price = TLMovement;
                            <MudText Color="Color.Error">@price</MudText>
                        }
                        else
                        {
                            TLMovement = TLMovement + datas[index].TLTotalAmount;
                            var price = TLMovement;
                            <MudText>@price</MudText>
                        }
                    </td>
                    <td>
                        <MudItem Class="d-flex">
                            <MudIconButton Icon="@Icons.Material.Filled.Update" Color="Color.Warning" Title="Güncelle" OnClick="@(()=> EditData(datas[index]))"></MudIconButton>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Title="Sil" OnClick="@(()=> DeleteData(datas[index]))"></MudIconButton>
                        </MudItem>
                    </td>
                </tr>
            }
        }
    </tbody>
</MudSimpleTable>

@code {
    private bool isBusy = false;
    decimal TLMovement = 0;
    bool isReading = false;

    private PersistingComponentStateSubscription? subscription;


    private List<DataModel> datas = new();

    protected override bool ShouldRender()
    {

        return base.ShouldRender();
    }

    protected override async Task OnInitializedAsync()
    {
        isBusy = true;
        // subscription = persistentComponentState.RegisterOnPersisting(() =>
        //  {
        //      persistentComponentState.PersistAsJson(nameof(datas), datas);
        //      return Task.CompletedTask;
        //  });

        // if (persistentComponentState.TryTakeFromJson(nameof(datas), out List<DataModel> dataList))
        // {
        //     datas = dataList;
        // }
        // else
        // {
        // }

            await GetAll();
        isBusy = false;
    }

    private async Task GetAll()
    {
        datas = (await dataService.GetAllData()).Data.ToList();
    }

    private async Task ExportToExtract()
    {
        DialogParameters parameters = new();
        parameters.Add("datas", datas);
        var dialog = dialogService.Show<Extract>("Ekstre Oluştur", parameters, options: MudHelper.MudDialogHelper.DialogOptionsLarge);
        var dialogResult = await dialog.Result;
    }

    private async Task EditData(DataModel model)
    {
        bool isNew = String.IsNullOrEmpty(model.ProcessType) ? true : false;

        DialogParameters parameters = new();
        parameters.Add("data", model);
        parameters.Add("isNew", isNew);
        parameters.Add("isPaidComponent", false);
        var dialog = dialogService.Show<EditData>("", parameters, MudHelper.MudDialogHelper.DialogOptionsExtraSmall);
        var dialogResult = await dialog.Result;
        if (dialogResult.Canceled == false)
        {
            await GetAll();
        }

    }

    private async Task DeleteData(DataModel model)
    {
        model.IsDeleted = true;
        var deleteResult = await messageboxHelper.ShowDialog("Veri Silme İşlemi", "Seçtiğiniz veriyi silmek istediğinize emin misiniz?");
        if (deleteResult == true)
        {
            var result = await dataService.UpdateData(model);
            if (result.Success == false)
            {
                messageboxHelper.ShowSnackMessage("Veri Silinemedi", Severity.Error);
                return;
            }

            messageboxHelper.ShowSuccessSnackMessage();
            await GetAll();
        }
    }

    public void Dispose() => subscription?.Dispose();
}
