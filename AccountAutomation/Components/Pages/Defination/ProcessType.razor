@page "/Defination/ProcessType"
@using WebUI.Components.Pages.Defination.Components

@inject IDefinationService definationService
@inject IDialogService dialogService

<MudOverlay Visible="@isBusy" DarkBackground="true">
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>

<MudStack Class="mb-3 pa-3" Row=true Justify="Justify.SpaceBetween">
    <MudText Align="Align.Start" Typo="Typo.h5" Color="Color.Primary">İşlem Tipi Tanımlama</MudText>
    <MudFab StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" OnClick="@(()=> EditProcessType(new ProcessTypeModel()))" Color="Color.Primary" />
</MudStack>

<MudSimpleTable Dense=true Striped=true Hover=true FixedHeader=true>
    <thead>
        <tr>
            <th>İsim</th>
            <th>Türkçe</th>
            <th>İngilizce</th>
            <th>İşlem</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in processTypes)
        {
            <tr>
                <td>@item.Code</td>
                <td>@item.Name</td>
                <td>
                    <MudIconButton Icon="@Icons.Material.Filled.Update" Color="Color.Warning" OnClick="@(()=> EditProcessType(item))">Düzenle</MudIconButton>
                </td>
            </tr>
        }
    </tbody>
</MudSimpleTable>

@code {
    private bool isBusy = false;

    private List<ProcessTypeModel> processTypes = new();

    protected override async Task OnInitializedAsync()
    {
        isBusy = true;
        processTypes = (await definationService.GetAll<ProcessTypeModel>()).Data.ToList();
        isBusy = false;
    }

    private async Task EditProcessType(ProcessTypeModel model)
    {
        bool isNew = string.IsNullOrEmpty(model?.Code) == false || model?.Code?.Length > 0 ? false : true;

        DialogParameters parameters = new();
        parameters.Add("processType", model);
        parameters.Add("isNew", isNew);
        var dialog = dialogService.Show<EditProcessType>("İşlem Tipi Ekle/Güncelle", parameters: parameters, options: MudHelper.MudDialogHelper.DialogOptionsSmall);
        var dialogResult = await dialog.Result;
    }

}
