@page "/Finance/Instants"
@using Microsoft.AspNetCore.Authorization
@using WebUI.Components.Pages.Finance.Components

@inject IInstantService instantService;
@inject MessageboxHelper messageboxHelper;
@inject IDialogService dialogService;
@inject IDataService dataService;

@attribute [Authorize(Roles = "COMPANY,ADMIN")]


<PageTitle>Cari Bakiye</PageTitle>

<MudOverlay Visible="@isBusy" DarkBackground="true">
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>

<MudStack Class="mb-2 pa-4" Row=true Justify="Justify.SpaceBetween">
    <MudText Align="Align.Start" Typo="Typo.h5" Color="Color.Primary">Cari Bakiye</MudText>
    <MudButton OnClick="@(()=> EditInstant(new InstantModel()))" Color="@Color.Success" Variant="Variant.Filled">Ekle</MudButton>
</MudStack>

<MudSimpleTable Dense=true Bordered=true Striped=true Hover=true>
    <thead>
        <tr>
            <th>TL Borç</th>
            <th>TL Alacak</th>
            <th>TL Bakiye</th>
            <th>Döviz Borç</th>
            <th>Döviz Alacak</th>
            <th>Döviz Bakiye</th>
            <th>Firma Ünvanı</th>
            <th>Firma Yetkilisi</th>
            <th>Firma Adresi</th>
            <th>Vergi Dairesi</th>
            <th>Vergi Numarası</th>
            <th>Sabit Telefon</th>
            <th>Cep Telefonu</th>
            <th>E-Mail</th>
            <th>Firma Türü</th>
            <th>İşlem</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var instant in instants)
        {
            <tr>
                <td>
                    @{
                        var TLEncumbrance = datas.Where(s => s.InstantId == instant.Id && s.ProcessType == ProcessTypeEnum.BUY.ToString() || s.ProcessType == ProcessTypeEnum.COLLECT.ToString() || s.ProcessType == ProcessTypeEnum.SALE_REFUND.ToString()).Sum(s => s.TLTotalAmount);
                    }
                    @TLEncumbrance
                </td>
                <td>
                    @{
                        var TLReceivable = datas.Where(s => s.InstantId == instant.Id && s.ProcessType == ProcessTypeEnum.SELL.ToString() || s.ProcessType == ProcessTypeEnum.PAY.ToString() || s.ProcessType == ProcessTypeEnum.PURCHASE_REFUND.ToString()).Sum(s => s.TLTotalAmount);
                    }
                    @TLReceivable
                </td>
                <td style="@((TLEncumbrance - TLReceivable) < 0 ? "color:red" : "")">@(TLEncumbrance - TLReceivable)</td>
                <td>
                    @{
                        var CurrencyEncumbrance = datas.Where(s => s.InstantId == instant.Id && s.ProcessType == ProcessTypeEnum.BUY.ToString() || s.ProcessType == ProcessTypeEnum.COLLECT.ToString() || s.ProcessType == ProcessTypeEnum.SALE_REFUND.ToString()).Sum(s => s.CurrencyTotalAmount);
                    }
                    @CurrencyEncumbrance
                </td>
                <td>
                    @{
                        var CurrencyReceivable = datas.Where(s => s.InstantId == instant.Id && s.ProcessType == ProcessTypeEnum.SELL.ToString() || s.ProcessType == ProcessTypeEnum.PAY.ToString() || s.ProcessType == ProcessTypeEnum.PURCHASE_REFUND.ToString()).Sum(s => s.CurrencyTotalAmount);
                    }
                    @CurrencyReceivable
                </td>
                <td style="@((CurrencyEncumbrance - CurrencyReceivable) < 0 ? "color:red" : "")">@(CurrencyEncumbrance - CurrencyReceivable)</td>
                <td>@instant.CompanyName</td>
                <td>@instant.CompanyOfficer</td>
                <td>@instant.CompanyAddress</td>
                <td>@instant.TaxHouse</td>
                <td>@instant.TaxNumber</td>
                <td>@instant.LandPhoneNumber</td>
                <td>@instant.PhoneNumber</td>
                <td>@instant.Email</td>
                <td>
                    @(EnumHelper<InstantTypeEnum>.GetDisplayValue(instant.Status))
                </td>
                <td>
                    <MudItem Class="d-flex">
                        <MudIconButton Icon="@Icons.Material.Filled.Update" Color="Color.Warning" Title="Güncelle" OnClick="@(()=> EditInstant(instant))"></MudIconButton>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Title="Sil" OnClick="@(()=> DeleteInstant(instant))"></MudIconButton>
                    </MudItem>
                </td>
            </tr>
        }
    </tbody>
</MudSimpleTable>


@code {
    private bool isBusy = false;

    private List<InstantModel> instants = new();
    private List<DataModel> datas = new();

    protected override async Task OnInitializedAsync()
    {
        isBusy = true;
        await GetAllInstants();
        await GetDatas();
        isBusy = false;
    }

    private async Task GetAllInstants()
    {
        var result = await instantService.GetAllInstant();
        if (result.Success == false)
        {
            messageboxHelper.ShowSnackMessage(result.Message, Severity.Error);
            return;
        }
        instants = result.Data.ToList();
    }

    private async Task GetDatas()
    {
        isBusy = true;
        var result = await dataService.GetAllForInstant();
        if (result.Success == false)
        {
            messageboxHelper.ShowSnackMessage(result.Message, Severity.Error);
            return;
        }

        datas = result.Data.ToList();
        isBusy = false;
    }

    private async Task DeleteInstant(InstantModel model)
    {
        model.IsDeleted = true;
        var checkDeleteResult = await messageboxHelper.ShowDialog("Cari Silme İşlemi", "Seçtiğiniz cariyi silmek istediğinize emin misiniz?");
        if (checkDeleteResult == true)
        {
            var result = await instantService.UpdateInstant(model);
            if (result.Success == false)
            {
                messageboxHelper.ShowSnackMessage("Çek Silinemedi", Severity.Error);
                return;
            }

            messageboxHelper.ShowSuccessSnackMessage();
        }
    }

    private async Task EditInstant(InstantModel model)
    {
        bool isNew = false;
        if (String.IsNullOrEmpty(model.CompanyName))
            isNew = true;

        DialogParameters parameters = new();
        parameters.Add("Instant", model);
        parameters.Add("IsNew", isNew);
        var dialog = dialogService.Show<EditInstant>("Cari Ekle/Güncelle", parameters, MudHelper.MudDialogHelper.DialogOptionsSmall);
        var dialogResult = await dialog.Result;
        if (dialogResult.Canceled == false)
        {
            if (isNew)
            {
                var data = dialogResult.Data as InstantModel;
                instants.Add(data);
            }
            else
                await GetAllInstants();

            StateHasChanged();
        }
    }
}
