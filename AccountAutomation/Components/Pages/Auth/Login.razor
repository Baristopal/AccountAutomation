@page "/Auth/Login"

@using Entities.Dto
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using WebUI.Authentication
@using static global::Utilities.Extensions.DependencyInjectionExtensions

@inject NavigationManager _NavigationManager
@inject ProtectedLocalStorage protectedLocalStorage
@inject AuthService authService
@inject IHttpContextAccessor httpContextAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Giriş Ekranı</PageTitle>

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

<div class="login-background">
    <MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center" Style="height: 100vh;">
        <div class="d-flex flex-column mud-width-full">
            <MudPaper Elevation="25" Class="pa-8 paper-round" Width="100%" MaxWidth="500px">
                <MudGrid>
                    <MudItem xs=12>
                        <MudText Align=Align.Center Typo="Typo.h6">
                            MUHASEBE OTOMASYONU
                        </MudText>
                    </MudItem>
                    <MudItem xs=12>
                        <MudText Typo="Typo.h6" GutterBottom="true">Kullanıcı Girişi</MudText>
                        <EditForm Model="userLogin" method="post" OnValidSubmit="DoLogin" FormName="loginForm">
                            <DataAnnotationsValidator />
                            <div>
                                <label>E-Posta</label>
                                <InputText @bind-Value="userLogin.Email" class="form-control form-control-lg" />
                            </div>
                            <ValidationMessage For="()=>userLogin.Email" class="text-danger" />
                            <div>
                                <label>Şifre</label>
                                <InputText @bind-Value="userLogin.Password" class="form-control form-control-lg" type="password" />
                            </div>
                            <ValidationMessage For="()=>userLogin.Password" class="text-danger" />
                            @if (string.IsNullOrEmpty(errorMessage) == false)
                            {
                                <div style="color:red">
                                    @errorMessage
                                </div>
                            }

                            <div class="mt-2">
                                <button type="submit" class="btn btn-primary">Giriş Yap</button>
                            </div>
                        </EditForm>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </div>
    </MudContainer>
</div>

<style>
    .login-background {
        background-image: url("../img/login-background2.png");
        min-height: 380px;
        background-position: center;
        background-repeat: no-repeat;
        background-size: cover;
        position: relative;
    }
</style>

@code {

    bool success;
    string[] errors = { };

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private EditContext editContext;

    [SupplyParameterFromForm(FormName = "loginForm")]
    private UserForLoginDto userLogin { get; set; } = new();

    [SupplyParameterFromQuery]
    private string ReturnUrl { get; set; } = "/";

    private bool IsBusy = false;
    private string errorMessage = "";

    bool PasswordVisibility;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private async Task DoLogin()
    {
        IsBusy = true;

        editContext = new(userLogin);

        errorMessage = "";

        var result = await authService.LoginCompany(userLogin);

        if (result.Success == false)
        {
            errorMessage = result.Message;
            return;
        }

        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, result.Data.Name),
            new Claim(ClaimTypes.Email, result.Data.Email),
            new Claim(ClaimTypes.NameIdentifier, result.Data.CompanyId.ToString())
        };
        if (result.Data.CompanyId == 1001)
            claims.Add(new Claim(ClaimTypes.Role, "ADMIN"));
        else
            claims.Add(new Claim(ClaimTypes.Role, "COMPANY"));

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        await HttpContext.SignInAsync(new ClaimsPrincipal(identity));
        RedirectManager.RedirectTo(ReturnUrl);


        IsBusy = false;
    }

    void TogglePasswordVisibility()
    {
        @if (PasswordVisibility)
        {
            PasswordVisibility = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisibility = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
}
