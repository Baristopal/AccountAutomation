@using PdfSharp.Drawing
@using PdfSharp.Fonts
@using PdfSharp.Pdf
@using PdfSharp.Snippets.Font

<MudOverlay Visible="@isBusy" DarkBackground="true">
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>


<MudDialog>
    <DialogActions>
    </DialogActions>
    <DialogContent>
        <MudItem Class="d-flex justify-end mb-3">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Print">Yazdır</MudButton>
        </MudItem>
        <MudSimpleTable Dense=true Bordered=true FixedHeader=true Hover=true Striped=true>
            <thead>
                <tr>
                    <th>İşlem Tipi</th>
                    <th>Tarih</th>
                    <th>Vade Tarihi</th>
                    <th>Fatura No</th>
                    <th>Açıklama</th>
                    <th>Stok/Masraf Adı</th>
                    <th>Stok Adet</th>
                    <th>Birim Adı</th>
                    <th>Kdv Tutar</th>
                    <th>Döviz Birim</th>
                    @if (datas.Count(s => s.Currency != CurrencyEnum.TL.ToString()) > 0)
                    {
                        <th>Döviz İşlem Toplamı</th>
                    }
                    <th>TL İşlem Toplamı</th>
                    <th>TL Borç</th>
                    <th>TL Alacak</th>
                    <th>Alış KDV</th>
                    <th>Satış KDV</th>
                    @if (datas.Count(s => s.Currency != CurrencyEnum.TL.ToString()) > 0)
                    {
                        <th>Döviz Borç</th>
                        <th>Döviz Alacak</th>
                    }
                    <th>TL Hareketler</th>
                </tr>
            </thead>
            <tbody>
                @if (datas.Count > 0)
                {
                    TLMovement = 0;
                    @for (int i = 0; i < datas.Count; i++)
                    {
                        int index = i;
                        <tr>
                            <td>
                                @(EnumHelper<ProcessTypeEnum>.GetDisplayValue(datas[index].ProcessType))
                            </td>
                            <td>@datas[index].ProcessDate?.ToShortDateString()</td>
                            <td>
                                @datas[index].MaturityDate?.ToShortDateString()
                            </td>
                            <td>@datas[index].InvoiceNumber</td>
                            <td>@datas[index].Description</td>
                            <td>@datas[index].ExpenseType</td>
                            <td>@datas[index].Stock</td>
                            <td>@datas[index].Unit</td>
                            <td>@datas[index].TaxAmount</td>
                            <td>@datas[index].Currency</td>
                            @if (datas.Count(s => s.Currency != CurrencyEnum.TL.ToString()) > 0)
                            {
                                <td>@datas[index].CurrencyTotalAmount</td>
                            }
                            <td>@datas[index].TLTotalAmount</td>
                            <td>
                                @if (datas[index].ProcessType.Contains(ProcessTypeEnum.BUY.ToString()) || datas[index].ProcessType.Contains(ProcessTypeEnum.COLLECT.ToString()) || datas[index].ProcessType.Contains(ProcessTypeEnum.SALE_REFUND.ToString()))
                                {
                                    if (datas[index].CurrencyTotalAmount > 0)
                                    {
                                        @(datas[index].Currency == "USD" ? datas[index].CurrencyTotalAmount * datas[index].USDExchange : datas[index].CurrencyTotalAmount * datas[index].EURExchange)
                                        ;
                                    }
                                    else
                                    {
                                        @datas[index].TLTotalAmount
                                    }
                                }
                            </td>
                            <td>
                                @if (datas[index].ProcessType.Contains(ProcessTypeEnum.SELL.ToString()) || datas[index].ProcessType.Contains(ProcessTypeEnum.PAY.ToString()) || datas[index].ProcessType.Contains(ProcessTypeEnum.PURCHASE_REFUND.ToString()))
                                {
                                    if (datas[index].CurrencyTotalAmount > 0)
                                    {
                                        @(datas[index].Currency == CurrencyEnum.USD.ToString() ? datas[index].CurrencyTotalAmount * datas[index].USDExchange : datas[index].CurrencyTotalAmount * datas[index].EURExchange)
                                        ;
                                    }
                                    else
                                    {
                                        @datas[index].TLTotalAmount
                                    }
                                }
                            </td>
                            <td>
                                @if (datas[index].ProcessType.Contains(ProcessTypeEnum.BUY.ToString()) || datas[index].ProcessType.Contains(ProcessTypeEnum.COLLECT.ToString()) || datas[index].ProcessType.Contains(ProcessTypeEnum.SALE_REFUND.ToString()))
                                {
                                    @datas[index].TaxAmount
                                }
                            </td>
                            <td>
                                @if (datas[index].ProcessType.Contains(ProcessTypeEnum.SELL.ToString()) || datas[index].ProcessType.Contains(ProcessTypeEnum.PAY.ToString()) || datas[index].ProcessType.Contains(ProcessTypeEnum.PURCHASE_REFUND.ToString()))
                                {
                                    @datas[index].TaxAmount
                                }
                            </td>
                            @if (datas.Count(s => s.Currency != CurrencyEnum.TL.ToString()) > 0)
                            {
                                <td>
                                    @if (datas[index].ProcessType.Contains(ProcessTypeEnum.BUY.ToString()) || datas[index].ProcessType.Contains(ProcessTypeEnum.COLLECT.ToString()) || datas[index].ProcessType.Contains(ProcessTypeEnum.SALE_REFUND.ToString()) && datas[index].CurrencyTotalAmount > 0)
                                    {
                                        @datas[index].CurrencyTotalAmount
                                    }
                                </td>
                                <td>
                                    @if (datas[index].ProcessType.Contains(ProcessTypeEnum.SELL.ToString()) || datas[index].ProcessType.Contains(ProcessTypeEnum.PAY.ToString()) || datas[index].ProcessType.Contains(ProcessTypeEnum.PURCHASE_REFUND.ToString()) && datas[index].CurrencyTotalAmount > 0)
                                    {
                                        @datas[index].CurrencyTotalAmount
                                    }
                                </td>
                            }
                            <td>
                                @if (datas[index].ProcessType.Contains(ProcessTypeEnum.BUY.ToString()) || datas[index].ProcessType.Contains(ProcessTypeEnum.COLLECT.ToString()) || datas[index].ProcessType.Contains(ProcessTypeEnum.SALE_REFUND.ToString()))
                                {
                                    TLMovement = TLMovement - datas[index].TLTotalAmount;
                                    var price = TLMovement;
                                    <MudText Color="Color.Error">@price</MudText>
                                }
                                else
                                {
                                    TLMovement = TLMovement + datas[index].TLTotalAmount;
                                    var price = TLMovement;
                                    <MudText>@price</MudText>
                                }
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </MudSimpleTable>
    </DialogContent>
</MudDialog>


@code {

    private bool isBusy = false;
    decimal TLMovement = 0;

    [Parameter]
    public List<DataModel> datas { get; set; } = new();

    private void Print()
    {

    }
}
